#!/usr/bin/env python

import os
import time
import subprocess
import psutil
import pygame
import pygame.camera
from pygame.locals import *

pygame.init()
pygame.camera.init()

screen_size = (800, 480)
image_size = (400, 300)

class Camera(object):
    def __init__(self):
        # Image size to capture
        self.size = image_size

        # We're lazy, just use the first camera
        cameras = pygame.camera.list_cameras()
        self.cam = pygame.camera.Camera(cameras[0], self.size)
        self.cam.start()

        self.snapshot = None

    def capture(self):
        "Get an image from the camera if it's ready"

        while (not self.cam.query_image()):
            # wait for it
            pass
        self.snapshot = self.cam.get_image()

        return self.snapshot

    def get(self):
        "Return the image that has been captured"

        return self.snapshot

    def close(self):
        "Shut things down"

        self.cam.stop()

class StopMotion(object):
    def __init__(self):

        self.images = []
        self.index = 0

    def add_image(self, image):
        "Add an image to the stop motion loop"

        self.images.append(image)

    def get(self, index):
        "Get an image"

        return self.images[index]

    def get_next(self):
        "Get the next image in the loop"

        if len(self.images) == 0:
            return None

        current_image = self.images[self.index]

        self.index = self.index + 1
        if self.index >= len(self.images):
            self.index = 0

        return current_image

    def clear(self):
        "Clear the motion queue"

        self.images = []
        self.index = 0

    def get_index(self):
        "Return a tuple, (current, max)"

        # Zero is special
        if len(self.images) == 0:
            return (0, 0)

        return (self.index + 1, len(self.images))

    def set_index(self, index = 0):
        "Set the current frame index, zero by default"

        self.index = index

class Button(object):

    def __init__(self, position, text, color, size = (150, 100)):
        self.position = position
        self.color = color
        self.size = size
        self.surface = pygame.surface.Surface(size)
        self.surface.fill(self.color)

        self.set_text(text)

    def set_text(self, text):
        "Set the text displayed on the button"

        self.text = text
        self.font = pygame.font.Font(None, 36)
        self.f_surface = self.font.render(text, 1, (255, 255, 255))

        # Calculate where the font surface goes
        f_y = (self.surface.get_height() / 2) - (self.f_surface.get_height() / 2)
        f_x = (self.surface.get_width() / 2) - (self.f_surface.get_width() / 2)
        self.f_position = (f_x + self.position[0], f_y + self.position[1])

    def get_text(self):
        "Return the button text"
        return self.text

    def display(self, display):
        "print the button on the display"

        display.blit(self.surface, self.position)
        display.blit(self.f_surface, self.f_position)

    def clicked(self):
        "True if the mouse click happened inside this box"

        pos = pygame.mouse.get_pos()

        if (pos[0] > self.position[0] and \
            pos[0] < self.position[0] + self.size[0]) and \
           (pos[1] > self.position[1] and \
            pos[1] < self.position[1] + self.size[1]):
            return True

        return False

class ShowText(object):

    def __init__(self, position):
        self.position = position
        self.font = pygame.font.Font(None, 36)
        self.surface = self.font.render("", 1, (255, 255, 255))

    def print_text(self, display, text):
        # First clear the old surface
        self.surface.fill((0, 0, 0))
        display.blit(self.surface, self.position)

        # Draw the new surface
        self.surface = self.font.render(text, 1, (255, 255, 255))
        display.blit(self.surface, self.position)

class Capture(object):
    def __init__(self):
        self.size = screen_size
        # create a display surface. standard pygame stuff
        self.display = pygame.display.set_mode(self.size, 0)
        #pygame.mouse.set_visible(False)
        #self.display = pygame.display.set_mode(self.size, pygame.FULLSCREEN)

        self.timer = time.time()
        self.preview = True

        self.cam = Camera()
        self.video = StopMotion()

        self.snapshot_button = Button((10, 340), "Snapshot", (255, 0, 255))
        self.stop_button = Button((180, 340), "Stop", (255, 0, 0))
        self.write_button = Button((350, 340), "Write", (00, 182, 255))
        self.reset_button = Button((520, 340), "Reset", (0, 255, 0))
        self.eject_button = Button((690, 340), "Eject", (0, 255, 0), (100, 100))
        self.shutdown_button = Button((760, 0), "X", (255, 0, 0), (40, 40))
        self.counter = ShowText((560, 300))

        # create a surface to capture to.  for performance purposes
        # bit depth is the same as that of the display surface.
        self.snapshot = pygame.surface.Surface(self.size, 0, self.display)

    def get_and_flip(self):

        # Only display the preview animation at 2 fps
        if self.preview and (time.time() - self.timer > 0.5):
            #self.timer = time.time()
            v = self.video.get_next()
            if v is not None:
                self.display.blit(v, (screen_size[0]/2, 0))
            self.timer = time.time()


        # Draw our camera view
        self.snapshot = self.cam.capture()
        self.display.blit(self.snapshot, (0,0))

        # Capture current frame / total display
        self.counter.print_text(self.display, "%s/%s" % self.video.get_index())

        # Buttons
        self.snapshot_button.display(self.display)
        self.stop_button.display(self.display)
        self.write_button.display(self.display)
        self.reset_button.display(self.display)
        self.eject_button.display(self.display)
        self.shutdown_button.display(self.display)

        pygame.display.flip()

    def shutdown(self):
        "Shutdown the system"

        command = ["poweroff"]
        subprocess.call(command)

    def eject(self):
        "Eject a flash drive"

        # If there is a disk mounted with our uid as the owner, we assume
        # that's where we put the files.
        my_uid = os.getuid()
        uid_string = "uid=%d" % my_uid
        for i in psutil.disk_partitions():
            if uid_string in i.opts:
                the_path = i.mountpoint

        # Build the umount command
        command = ["umount"]
        command.append(the_path)
        subprocess.call(command)

    def write(self):
        "Write out the files for use elsewhere"

        the_name = ""
        filenames = []

        # Get the name of the project
        #
        # Clear the screen
        self.display.fill((0, 0, 0))

        letters = []

        # Build our buttons
        name_button = Button((10, 0), "Name:", (100, 0, 100), (780, 30))
        space_button = Button((10, 380), "Space", (100, 0, 100), (200, 80))
        back_button = Button((220, 380), "Back", (100, 0, 100), (200, 80))
        done_button = Button((590, 380), "Done", (100, 0, 100), (200, 80))

        count = 0
        buttons = ["ABCDEFGHIJ",
                    "KLMNOPQRST",
                    "UVWXYZ\'-=+",
                    "0123456789"]

        for loop in range(0,len(buttons)):
            count = 0
            for i in buttons[loop]:
                a_button = Button((count * 80, 35 + 85 * loop), i, (100, 0, 100), (75, 80))
                letters.append(a_button)
                count = count + 1


        Waiting = True
        Cancel = False
        while Waiting:
            events = pygame.event.get()
            for e in events:
                if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE):
                    Waiting = False
                    Cancel = True
                if (e.type == MOUSEBUTTONDOWN):
                    if done_button.clicked():
                        Waiting = False
                        the_name = name_button.get_text()[5:]
                        # If no name is set, don't let them quit
                        if not the_name:
                            Cancel = True
                    elif space_button.clicked():
                            the_name = name_button.get_text()
                            the_name = the_name + " "
                            name_button.set_text(the_name)
                    elif back_button.clicked():
                            the_name = name_button.get_text()
                            the_name = the_name[:-1]
                            if len(the_name) < 5:
                                the_name = "Name:"
                            name_button.set_text(the_name)
                    for i in letters:
                        if i.clicked():
                            pushed_letter = i.get_text()
                            the_name = name_button.get_text()
                            the_name = the_name + pushed_letter
                            name_button.set_text(the_name)

            for i in letters:
                i.display(self.display)
            name_button.display(self.display)
            space_button.display(self.display)
            back_button.display(self.display)
            done_button.display(self.display)
            pygame.display.flip()

        # Clear the screen
        self.display.fill((0, 0, 0))

        if Cancel:
            return

        # TODO Use some sort of temporary directory
        try:
            os.stat("pics")
        except:
            os.mkdir("pics")

        # Loop over the images
        for i in range(self.video.get_index()[1]):
            img = self.video.get(i)
            filename = "pics/%d.png" % i
            filenames.append(filename)
            pygame.image.save(img, filename)

        # Figure out where we should put the output gif
        the_path = '.'

        # If there is a disk mounted with our uid as the owner, we assume
        # that's where we put the files.
        my_uid = os.getuid()
        uid_string = "uid=%d" % my_uid
        for i in psutil.disk_partitions():
            if uid_string in i.opts:
                the_path = i.mountpoint

        # XXX Use this someday
        # ffmpeg -r 1 -f image2 -s 352x288 -i %d.png -vcodec libx264 -crf
        # 25 -pix_fmt yuv420p test.mp4
        command = ["convert", "-loop", "0", "-delay", "25"]
        command.extend(filenames)
        command.append("%s/%s.gif" % (the_path, the_name))
        subprocess.call(command)

        # Clean up the pics
        for i in range(self.video.get_index()[1]):
            filename = "pics/%d.png" % i
            os.unlink(filename)

    def main(self):
        going = True
        while going:
            events = pygame.event.get()
            for e in events:
                if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE):
                    # close the camera safely
                    #self.cam.stop()
                    going = False
                if (e.type == KEYDOWN and e.key == K_SPACE):
                    self.video.add_image(self.snapshot)
                if (e.type == MOUSEBUTTONDOWN):
                    if self.snapshot_button.clicked():
                        self.video.add_image(self.snapshot)
                    elif self.stop_button.clicked():
                        if self.preview:
                            self.preview = False
                            self.stop_button.set_text("Start")
                        else:
                            self.preview = True
                            self.stop_button.set_text("Stop")
                    elif self.write_button.clicked():
                        self.write()
                    elif self.eject_button.clicked():
                        self.eject()
                    elif self.shutdown_button.clicked():
                        self.shutdown()
                    elif self.reset_button.clicked():
                        v = pygame.surface.Surface(image_size)
                        self.display.blit(v, (screen_size[0]/2, 0))
                        self.video.clear()

                        # Also fix the start/stop button
                        self.preview = True
                        self.stop_button.set_text("Stop")

            self.get_and_flip()

c = Capture()
c.main()
